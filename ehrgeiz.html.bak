<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ehrgeiz - Gamified Productivity</title>
  <script src="./lib/react.development.js"></script>
  <script src="./lib/react-dom.development.js"></script>
  <script src="./lib/babel.min.js">
   console.log('Script running');
   const { useState, useEffect } = React;
   const [important, setImportant] = useState(false);
  </script>
  <link href="./output.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white">
  <div id="root" class="min-h-screen p-4"></div>

  <script type="text/babel">
    const { useState, useEffect } = React;

    function getDateString(date = new Date()) {
      return date.toDateString();
    }

    function EhrgeizApp() {
      // Load from localStorage
      const [goals, setGoals] = useState(() => {
        const saved = localStorage.getItem('ehrgeizGoals');
        return saved ? JSON.parse(saved) : [];
      });
      const [tasks, setTasks] = useState(() => {
        const saved = localStorage.getItem('ehrgeizTasks');
        return saved ? JSON.parse(saved) : [];
      });
      const [newTask, setNewTask] = useState('');
      const [newGoal, setNewGoal] = useState('');
      const [category, setCategory] = useState('Relevant');
      const [urgent, setUrgent] = useState(false);
      const [important, setImportant] = useState(false);
      const [lifetimePoints, setLifetimePoints] = useState(() => {
        const saved = localStorage.getItem('ehrgeizLifetimePoints');
        return saved ? parseInt(saved) : 0;
      });
      const [decayDays, setDecayDays] = useState(() => {
        const saved = localStorage.getItem('ehrgeizDecayDays');
        return saved ? parseInt(saved) : 7;
      });
      const [dailyHistory, setDailyHistory] = useState(() => {
        const saved = localStorage.getItem('ehrgeizDailyHistory');
        return saved ? JSON.parse(saved) : {};
      });
      const [lastProcessedDate, setLastProcessedDate] = useState(() => {
        const saved = localStorage.getItem('ehrgeizLastProcessedDate');
        return saved || getDateString(new Date(0));
      });

      const today = getDateString();
      const [currentDayBase, setCurrentDayBase] = useState(0);

      // Point values
      const pointValues = {
        Relevant: 5,
        Other: 3,
        Chores: 2,
        People: 5,
        Backlog: 5,
        Abspielen: 1  // Assumed 1 pt for leisure; adjust if needed
      };

      // Save to localStorage
      useEffect(() => {
        localStorage.setItem('ehrgeizGoals', JSON.stringify(goals));
        localStorage.setItem('ehrgeizTasks', JSON.stringify(tasks));
        localStorage.setItem('ehrgeizLifetimePoints', lifetimePoints);
        localStorage.setItem('ehrgeizDecayDays', decayDays);
        localStorage.setItem('ehrgeizDailyHistory', JSON.stringify(dailyHistory));
        localStorage.setItem('ehrgeizLastProcessedDate', lastProcessedDate);
      }, [goals, tasks, lifetimePoints, decayDays, dailyHistory, lastProcessedDate]);

      // Process backlog decay and daily bonuses on load
      useEffect(() => {
        // Backlog decay
        const now = Date.now();
        const decayMs = decayDays * 86400000;
        setTasks(prevTasks =>
          prevTasks.map(task => {
            if (task.category !== 'Backlog' && (now - new Date(task.createdDate).getTime()) > decayMs) {
              return { ...task, category: 'Backlog', points: pointValues.Backlog };
            }
            return task;
          })
        );

        // Process daily bonuses for past days
        const todayDate = new Date(today);
        const lastProcessed = new Date(lastProcessedDate);
        if (todayDate > lastProcessed) {
          let newLifetime = lifetimePoints;
          let currentDate = new Date(lastProcessed);
          currentDate.setDate(currentDate.getDate() + 1);

          while (currentDate < todayDate) {
            const dateStr = getDateString(currentDate);
            const thisBase = dailyHistory[dateStr] || 0;
            const prevDateStr = getDateString(new Date(currentDate.getTime() - 86400000));
            const prevBase = dailyHistory[prevDateStr] || 0;
            if (thisBase > prevBase) {
              newLifetime += 5;
            }
            currentDate.setDate(currentDate.getDate() + 1);
          }
          setLifetimePoints(newLifetime);
          setLastProcessedDate(today);
        }

        // Set current day base
        setCurrentDayBase(dailyHistory[today] || 0);
      }, []);  // Run once on mount

      // Add goal
      const addGoal = () => {
        if (newGoal.trim() === '') return;
        setGoals([...goals, newGoal.trim()]);
        setNewGoal('');
      };

      // Add task
      const addTask = () => {
        if (newTask.trim() === '') return;
        const taskPoints = pointValues[category];
        const newTaskObj = {
          id: Date.now(),
          text: newTask,
          category,
          points: taskPoints,
          urgent,
          important,
          createdDate: new Date().toISOString()
        };
        setTasks([...tasks, newTaskObj]);
        setNewTask('');
        setUrgent(false);
        setImportant(false);
      };

      // Complete task
      const completeTask = (id) => {
        const task = tasks.find(t => t.id === id);
        if (!task) return;

        let pointsEarned = task.points;
        let bonus = 0;
        if (task.urgent || task.important) {
          bonus += 4;
        }
        pointsEarned += bonus;

        // Update lifetime
        setLifetimePoints(prev => prev + pointsEarned);

        // Update current day base
        const newBase = currentDayBase + pointsEarned;
        setCurrentDayBase(newBase);
        setDailyHistory(prev => ({ ...prev, [today]: newBase }));

        // Remove task
        setTasks(prev => prev.filter(t => t.id !== id));
      };

      const handleKeyPress = (e) => {
        if (e.key === 'Enter') addTask();
      };

      const goalHandleKeyPress = (e) => {
        if (e.key === 'Enter') addGoal();
      };

      return (
        <div class="max-w-2xl mx-auto space-y-6">
          <h1 class="text-4xl font-bold text-center mb-6 text-yellow-400">Ehrgeiz</h1>

          {/* Lifetime Points */}
          <div class="bg-gray-800 p-4 rounded-lg">
            <h2 class="text-xl font-semibold">Lifetime Points: {lifetimePoints}</h2>
            <div class="w-full bg-gray-700 rounded-full h-4 mt-2">
              <div
                class="bg-yellow-400 h-4 rounded-full transition-all"
                style={{ width: `${Math.min((lifetimePoints / 1000) * 100, 100)}%` }}
              ></div>
            </div>
          </div>

          {/* Current Day */}
          <div class="bg-gray-800 p-4 rounded-lg">
            <h3 class="text-lg font-semibold">Today ({today}): {currentDayBase} pts</h3>
          </div>

          {/* Settings */}
          <div class="bg-gray-800 p-4 rounded-lg">
            <h3 class="text-lg font-semibold mb-2">Settings</h3>
            <label class="block mb-2">
              Backlog Decay (days):
              <input
                type="number"
                value={decayDays}
                onChange={(e) => setDecayDays(parseInt(e.target.value) || 7)}
                class="ml-2 p-1 bg-gray-700 rounded text-white w-16"
                min="1"
              />
            </label>
          </div>

          {/* Main Goals */}
          <div class="bg-gray-800 p-4 rounded-lg">
            <h3 class="text-lg font-semibold mb-2">Main Goals</h3>
            <div class="flex mb-2">
              <input
                type="text"
                value={newGoal}
                onChange={(e) => setNewGoal(e.target.value)}
                onKeyPress={goalHandleKeyPress}
                class="flex-1 p-2 bg-gray-700 rounded-l-md"
                placeholder="Add a main goal..."
              />
              <button onClick={addGoal} class="p-2 bg-yellow-400 text-gray-900 rounded-r-md">Add</button>
            </div>
            <ul class="space-y-1">
              {goals.map((goal, i) => (
                <li key={i} class="p-2 bg-gray-700 rounded text-sm">{goal}</li>
              ))}
            </ul>
          </div>

          {/* Add Task */}
          <div class="bg-gray-800 p-4 rounded-lg">
            <h3 class="text-lg font-semibold mb-2">Add Task</h3>
            <input
              type="text"
              value={newTask}
              onChange={(e) => setNewTask(e.target.value)}
              onKeyPress={handleKeyPress}
              class="w-full p-2 mb-2 bg-gray-700 rounded"
              placeholder="Task description..."
            />
            <div class="flex space-x-2 mb-2">
              <select
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                class="p-2 bg-gray-700 rounded flex-1"
              >
                {Object.keys(pointValues).map(cat => (
                  <option key={cat} value={cat}>{cat} ({pointValues[cat]} pts)</option>
                ))}
              </select>
            </div>
            <div class="flex space-x-4 mb-2">
              <label class="flex items-center">
                <input type="checkbox" checked={urgent} onChange={(e) => setUrgent(e.target.checked)} class="mr-1" />
                Urgent (+4 bonus)
              </label>
              <label class="flex items-center">
                <input type="checkbox" checked={important} onChange={(e) => setImportant(e.target.checked)} class="mr-1" />
                Important (+4 bonus)
              </label>
            </div>
            <button onClick={addTask} class="w-full p-2 bg-yellow-400 text-gray-900 rounded hover:bg-yellow-500">
              Add Task
            </button>
          </div>

          {/* Task List */}
          <div class="bg-gray-800 p-4 rounded-lg">
            <h3 class="text-lg font-semibold mb-2">Tasks</h3>
            <ul class="space-y-2">
              {tasks.map(task => (
                <li key={task.id} class="flex justify-between items-center p-3 bg-gray-700 rounded-md">
                  <div class="flex-1">
                    <div class="font-medium">{task.text}</div>
                    <div class="text-sm text-gray-400">
                      {task.category} ({task.points} pts) | Created: {new Date(task.createdDate).toLocaleDateString()}
                      {task.urgent && <span class="ml-2 text-red-400">Urgent</span>}
                      {task.important && <span class="ml-2 text-blue-400">Important</span>}
                    </div>
                  </div>
                  <button
                    onClick={() => completeTask(task.id)}
                    class="p-2 bg-green-500 text-white rounded hover:bg-green-600 ml-2"
                  >
                    Complete
                  </button>
                </li>
              ))}
            </ul>
          </div>

          {/* Daily History (Recent) */}
          <div class="bg-gray-800 p-4 rounded-lg">
            <h3 class="text-lg font-semibold mb-2">Recent Daily Scores</h3>
            <ul class="space-y-1">
              {Object.entries(dailyHistory)
                .sort(([a], [b]) => new Date(b) - new Date(a))
                .slice(0, 7)
                .map(([date, pts]) => (
                  <li key={date} class="text-sm">{date}: {pts} pts</li>
                ))}
            </ul>
          </div>
        </div>
      );
    }

    ReactDOM.render(<EhrgeizApp />, document.getElementById('root'));
  </script>
</body>
</html>
